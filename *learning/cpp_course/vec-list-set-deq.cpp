#include <vector>
#include <set>
#include <list>
#include "./debug.cpp"
#include <iostream>
using namespace std;

int main(){
    // begin(arr) == arr.begin(); end(arr) == arr.end(); next(arr) == arr.next(); prev(arr) == arr.prev()
    //vector - динамический массив
    vector<int> v1 {1,2,3}; // {1, 2, 3}
    vector<int> v2 (3,5);   // {5, 5, 5} (3 раза по 5s)

    vector<int> v3;
    v3.push_back(1);        // добавление нового элемента в конец вектора
    v3.reserve(10);         // резерв памяти для 10 значений в векторе (ускоряет другие методы, например push_back)

    vector<int> v4 {1,2,3,4,5};
    v4.resize(10, 1);       // изменение размера вектора (1арг - новый размер, 2арг - элементы, которыми нужно заполнить (по дефолту 0))

    vector<int> v5(10);
    v5.insert(v5.begin(), 123); // вставка в вектор перед 0 элементом числа 123
    v5.insert(v5.begin() + 5, v1.begin(), v1.end()); // вставка в вектор другого вектора перед 5 элементом

    // list - связанный список
    list<int> l1 {1,2,3};
    l1.push_back(8);       // добавление нового элемента в конец списка
    l1.push_front(5);       // добавление нового элемента в начало списка

    list<int> l2 {1,2,3,4,5};
    l2.resize(10, 1);       // изменение размера списка (1арг - новый размер, 2арг - элементы, которыми нужно заполнить (по дефолту 0))

    list<int> l3(10);
    l3.insert(l3.begin(), 123); // вставка в список перед 0 элементом числа 123
    l3.insert(++ ++ ++ ++ ++l3.begin(), l1.begin(), l1.end()); // вставка в список другого списка перед 5 элементом
    
    // deque - очередь (много памяти занимает)
    // все также как и у vector, но есть еще и push_front()

    // set - множество (упорядоченный набор уникальных элементов); красно-черное дерево
    set<int> s1 {1,2,2};    // {1, 2}
    s1.insert(5);           // добавление нового элемента в конец сета


    debug(v1);
    debug(v2);
    debug(v3);
    debug(v4);
    debug(v5);
    debug(l1);
    debug(l2);
    debug(l3);
    debug(s1);
}